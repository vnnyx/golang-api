// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "golang-simple-api/entity"

	mock "github.com/stretchr/testify/mock"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

// CreateCustomer provides a mock function with given fields: ctx, customer
func (_m *CustomerRepository) CreateCustomer(ctx context.Context, customer entity.Customer) entity.Customer {
	ret := _m.Called(ctx, customer)

	var r0 entity.Customer
	if rf, ok := ret.Get(0).(func(context.Context, entity.Customer) entity.Customer); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	return r0
}

// DeleteCustomer provides a mock function with given fields: ctx, customerId
func (_m *CustomerRepository) DeleteCustomer(ctx context.Context, customerId int) {
	_m.Called(ctx, customerId)
}

// GetAllCustomer provides a mock function with given fields: ctx
func (_m *CustomerRepository) GetAllCustomer(ctx context.Context) []entity.Customer {
	ret := _m.Called(ctx)

	var r0 []entity.Customer
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Customer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Customer)
		}
	}

	return r0
}

// GetCustomerById provides a mock function with given fields: ctx, customerId
func (_m *CustomerRepository) GetCustomerById(ctx context.Context, customerId int) (entity.Customer, error) {
	ret := _m.Called(ctx, customerId)

	var r0 entity.Customer
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Customer); ok {
		r0 = rf(ctx, customerId)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, customerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *CustomerRepository) GetUserByUsername(ctx context.Context, username string) (entity.Customer, error) {
	ret := _m.Called(ctx, username)

	var r0 entity.Customer
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Customer); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomer provides a mock function with given fields: ctx, customer
func (_m *CustomerRepository) UpdateCustomer(ctx context.Context, customer entity.Customer) entity.Customer {
	ret := _m.Called(ctx, customer)

	var r0 entity.Customer
	if rf, ok := ret.Get(0).(func(context.Context, entity.Customer) entity.Customer); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	return r0
}

type NewCustomerRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerRepository creates a new instance of CustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerRepository(t NewCustomerRepositoryT) *CustomerRepository {
	mock := &CustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
